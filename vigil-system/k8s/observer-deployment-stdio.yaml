apiVersion: apps/v1
kind: Deployment
metadata:
  name: vigil-observer-stdio
  namespace: default
  labels:
    app: vigil-observer-stdio
    component: monitoring
    tier: data-collection
    version: stdio
spec:
  replicas: 1  # Single observer to avoid duplicate monitoring
  selector:
    matchLabels:
      app: vigil-observer-stdio
  template:
    metadata:
      labels:
        app: vigil-observer-stdio
        component: monitoring
        tier: data-collection
        version: stdio
    spec:
      containers:
      # Single container that includes both observer agent and MCP server
      # The MCP server runs as a subprocess communicating via stdio
      - name: observer-agent
        image: gcr.io/vigil-demo-hackathon/vigil-observer-stdio:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: a2a-port
        env:
        # Observer configuration
        - name: MCP_SERVER_PATH
          value: "/app/vigil_mcp_stdio_server.py"
        - name: OBSERVER_PORT
          value: "8000"
        - name: ANALYST_AGENT_URL
          value: "http://vigil-analyst:8001"
        - name: POLLING_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: vigil-config
              key: polling_interval
              optional: true
        - name: BATCH_SIZE
          valueFrom:
            configMapKeyRef:
              name: vigil-config
              key: batch_size
              optional: true
        # Bank of Anthos endpoints (all in default namespace)
        - name: BANK_BASE_URL
          value: "http://userservice:8080"
        - name: LEDGER_WRITER_URL
          value: "http://ledgerwriter:8080"
        - name: TRANSACTION_HISTORY_URL
          value: "http://transactionhistory:8080"
        - name: BALANCE_READER_URL
          value: "http://balancereader:8080"
        - name: CONTACTS_URL
          value: "http://contacts:8080"
        - name: USER_SERVICE_URL
          value: "http://userservice:8080"
        # MCP Server configuration (used by subprocess)
        - name: REQUEST_TIMEOUT
          value: "30"
        - name: AUTH_USERNAME
          valueFrom:
            configMapKeyRef:
              name: vigil-config
              key: AUTH_USERNAME
              optional: true
        - name: AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vigil-secrets
              key: AUTH_PASSWORD
              optional: true
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: vigil-secrets
              key: JWT_SECRET
              optional: true
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "384Mi"  # Increased to account for both processes
            cpu: "150m"
          limits:
            memory: "768Mi"
            cpu: "750m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      volumes:
      - name: logs-volume
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: vigil-observer-stdio
  namespace: default
  labels:
    app: vigil-observer-stdio
spec:
  selector:
    app: vigil-observer-stdio
  ports:
  - name: a2a-port
    port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP